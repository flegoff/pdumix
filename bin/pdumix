#!/usr/bin/ruby

# == Synopsis
#
#   Power on or off outlets on APC PDUs, using SNMP
#
#
# == Examples
#
#   Reboot a node :
#   $ pdumix --reboot -h chinqchint-1.lille.grid5000.fr
#
#   Power on a node :
#   $ pdumix --up -h chinqchint-1.lille.grid5000.fr
#
#   Power off a node :
#   $ pdumix --down -h chinqchint-1.lille.grid5000.fr
#
#
# == Usage
#   $ pdumix [options]
#
#   For help use : pdumix -h
#
# == Options
#
#   -r, --reboot      Sends the reboot command to the power outlet
#   -u, --up          Power on the outlet
#   -d, --down        Power down the outlet
#
#   -h, --help        Display help
#   -d, --debug       Display debug lines
# 

require 'optparse'
require 'yaml'
require 'snmp'
include SNMP

def fetch_file(file)
  return YAML.load_file(file)
end

def fetch_node(file, name)
  node = file[name]
  print "node=#{name}\n";
  print "  chassis=#{node['chassis']}\n";
  print "  port=#{node['port']}\n";
  print "  pdu=#{node['pdu']}\n";
  return node
end

powerUnitState = '1.3.6.1.4.1.318.1.1.12.3.3.1.1.4'
powerUnitName  = '1.3.6.1.4.1.318.1.1.12.3.4.1.1.2'

# ---

def rewrite_conf(file)
  for i in file
    node = fetch_node(file, i[0])

    powerUnitState_OID = ObjectId.new("#{powerUnitState}.#{node['port']}")
    powerUnitName_OID = ObjectId.new("#{powerUnitName}.#{node['port']}")
    
    SNMP::Manager.open( :Host => node['pdu'],
                        :Community => 'private',
                        :WriteCommunity => 'private',
                        :Version => :SNMPv1) do |manager|
                          
      tportName = "chassis-#{node['chassis']}"
      portName = manager.get_value(powerUnitName_OID)
      portState = manager.get_value(powerUnitState_OID)
      
      print "  (R) name=#{portName}\n"
      print "  (R) state=#{portState}\n"
      
      print "  (W) name=#{tportName}\n"
      var = VarBind.new(powerUnitName_OID, SNMP::OctetString.new(tportName))
      manager.set(var)

    end
  end
end

# ---

def change_state(file,name,state)
  node = fetch_node(file, name)

  powerUnitState_OID = ObjectId.new("#{powerUnitState}.#{node['port']}")
  powerUnitName_OID = ObjectId.new("#{powerUnitName}.#{node['port']}")
    
  SNMP::Manager.open( :Host => node['pdu'],
                      :Community => 'private',
                      :WriteCommunity => 'private',
                      :Version => :SNMPv1) do |manager|
                          
    portName = manager.get_value(powerUnitName_OID)
    portState = manager.get_value(powerUnitState_OID)

    print "  (R) name=#{portName}\n"
    print "  (R) state=#{portState}\n"

  if (portState != state)
      print "  (W) state=#{state}\n"
      var = VarBind.new(powerUnitName_OID, SNMP::Integer.new(state))
      # manager.set(var)
    end
  end
end

# ---

file = fetch_file('mapping_pdu.txt')
# rewrite_conf(file)


if opt['r'] or opt[''] or opt['']
  print "yay"
  state = { 'On' => 1, 'Off' => 2, 'Reboot' => 3 }
  change_state(file,'chinqchint-1.lille.grid5000.fr', state['Reboot'])
else
  print "usage: #{$0} <-r|-u|-d> <hostname>\n"
  print "  -r : reboot\n"
  print "  -u : power up\n"
  print "  -d : power down\n"
end