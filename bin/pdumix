#!/usr/bin/ruby

# == Synopsis
#
#   Power on or off outlets on APC PDUs, using SNMP
#
#
# == Examples
#
#   Reboot a node :
#   $ pdumix --reboot -n chinqchint-1.lille.grid5000.fr
#
#   Power on a node :
#   $ pdumix --up -n chinqchint-1.lille.grid5000.fr
#
#   Power off a node :
#   $ pdumix --down -n chinqchint-1.lille.grid5000.fr
#
#
# == Usage
#   $ pdumix [options]
#
#   For help use : pdumix -h
#
# 
# == Options
#
#   A mandatory
#   -n, --name        Set the hostname to be looked up in the configuration
#
#   OR the mandatory fields (IN FUTURE RELEASES)
#   -o, --outlet      Outlet number
#   -p, --pdu         PDU hostname
#   -c, --community   SNMP write community
#
#   Combined with one of the following
#   -r, --reboot      Sends the reboot command to the power outlet
#   -u, --up          Power on the outlet
#   -d, --down        Power down the outlet
#
#   -h, --help        Display help
#   -v, --verbose     Run verbosely
#
# 
# == Authors
#
#  - Florian Le Goff < Florian.Le_Goff > at inria.fr
# 
# 
# == License
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

#
# APC OIDs
#

$powerUnitState = '1.3.6.1.4.1.318.1.1.12.3.3.1.1.4'
$powerUnitName  = '1.3.6.1.4.1.318.1.1.12.3.4.1.1.2'
$powerState = { :on => 1, :off => 2, :reboot => 3 }
$powerStateReversed = { 1 => "On", 2 => "Off", 3 => "Reboot" }

# ---

require 'optparse'
require 'yaml'
require 'snmp'
include SNMP

# ---
# parse_options
# : parse the command line options
# => options : an empty hash table
# returns: nothing

def parse_options(options)

  opts = OptionParser.new
  opts.banner = "Usage: #{$0} <-r|-u|-d> -n <hostname>"
    
  opts.on("-n", "--name NODE", "Set the hostname to be looked up in the configuration") do |n|
    options[:node] = n;
  end

  opts.on("-r", "--reboot", "Sends a reboot command to the power outlet") do |r|
    options[:action] = $powerState[:reboot]
  end

  opts.on("-u", "--up", "Power on the outlet") do |r|
    options[:action] = $powerState[:on]
  end

  opts.on("-d", "--down", "Power down the outlet") do |r|
    options[:action] = $powerState[:off]
  end

  opts.on("-v", "--verbose", "Run verbosely") do |v|
    options[:verbose] = true
  end
        
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
  
  opts.parse!
  
  if not options[:node]
    puts opts
    exit
  end
   
end


# ---
# fetch_file
# : loads a configuration file
# => file: file name
# returns : a hash table containing a configuration (nodes list or general conf)

def fetch_file(file)
    return YAML.load_file(file)
end


# ---
# fetch_node
# : loads a node from the configuration
# => file: configuration object from which the node should be loaded
# => name: node name
# => options: option hash table
# returns : a node hash

def fetch_node(file, options)
  name = options[:node]

  if not (node = file[name])
    raise
    return
  else
  
    if options[:verbose]
      puts "found = [#{name}]"
      puts "found =   chassis=#{node['chassis']}"
      puts "found =   port=#{node['port']}"
      puts "found =   pdu=#{node['pdu']}"
    end
  
    return node
  end
end

# ---
# read_state
# : read the PDU's configuration
# => file: configuration object
# => node: node object
# => options: option hash table
 
def read_state(file, node, config, options)

  powerUnitState_OID = ObjectId.new("#{$powerUnitState}.#{node['port']}")

  snmp_read = config['defaults']['snmp_read']
  snmp_write = config['defaults']['snmp_write']

  if (not config['pdus'].empty?) and (config['pdus'][node['pdu']])
    if config['pdus'][node['pdu']]['snmp_read']
      snmp_read = config['pdus'][node['pdu']]['snmp_read']
    end
    if config['pdus'][node['pdu']]['snmp_write']
      snmp_write = config['pdus'][node['pdu']]['snmp_write']
    end
  end

  if (not snmp_read) or (not snmp_write)
    puts "#{$0}: error: missing snmp read and write communities."
    exit
  end

  if options[:verbose]
    puts "conf  ! setting snmp_read to #{snmp_read}"
    puts "conf  ! setting snmp_write to #{snmp_write}"
  end
    
  SNMP::Manager.open( :Host => node['pdu'], :Community => snmp_read, :WriteCommunity => snmp_write, :Version => :SNMPv1) do |manager|
    begin
      portState = manager.get_value(powerUnitState_OID)
      puts "current_state=#{portState}"
      
      rescue SocketError
        puts "#{$0}: error: #{$!}"
        puts "unable to etablish a SNMP session to #{node['pdu']}"
        exit

      rescue SNMP
        puts "#{$0}: error: #{$!}"
        puts "unable to read data on host, please check your SNMP 'read' and 'write' community configuration"
        exit

      rescue
        puts "#{$0}: error: #{$!}"
        puts "please report this error to the authors"

      end # begin
    end # SNMP::Manager.open

end

# ---
# change_state
# : edit the PDU's configuration
# => file: configuration object
# => node: node object
# => options: option hash table
 
def change_state(file, node, config, options)

  powerUnitState_OID = ObjectId.new("#{$powerUnitState}.#{node['port']}")
  
  snmp_read = config['defaults']['snmp_read']
  snmp_write = config['defaults']['snmp_write']

  if (not config['pdus'].empty?) and (config['pdus'][node['pdu']])
    if config['pdus'][node['pdu']]['snmp_read']
      snmp_read = config['pdus'][node['pdu']]['snmp_read']
    end
    if config['pdus'][node['pdu']]['snmp_write']
      snmp_write = config['pdus'][node['pdu']]['snmp_write']
    end
  end

  if (not snmp_read) or (not snmp_write)
    puts "#{$0}: error: missing snmp read and write communities."
    exit
  end

  if options[:verbose]
    puts "conf  ! setting snmp_read to #{snmp_read}"
    puts "conf  ! setting snmp_write to #{snmp_write}"
  end
  
  SNMP::Manager.open( :Host => node['pdu'], :Community => snmp_read, :WriteCommunity => snmp_write, :Version => :SNMPv1) do |manager|
    begin
      portState = manager.get_value(powerUnitState_OID)
      portNewState = options[:action]

      if options[:verbose]
        puts "  ? read   : state : #{portState}"
        puts "  = wanted : state : #{portNewState}"
      end

      if (portState != portNewState)
        puts "  ! write  : state : #{portNewState}" if options[:verbose]
        var = VarBind.new(powerUnitState_OID, SNMP::Integer.new(portNewState))
        manager.set(var)
      end

    rescue SocketError
      puts "#{$0}: error: #{$!}"
      puts "unable to etablish a SNMP session to #{node['pdu']}"
      exit

    rescue SNMP
      puts "#{$0}: error: #{$!}"
      puts "unable to read or write data on host, please check your SNMP 'read' and 'write' community configuration"
      exit
      
    rescue
      puts "#{$0}: error: #{$!}"
      puts "please report this error to the authors"

    end # begin
  end # SNMP::Manager.open

end


#
# --- main
#

options = { }
parse_options(options)

begin
  config = fetch_file('/etc/pdumix/conf')

  if (not config['defaults']) or (not config['defaults']['snmp_read']) or (not config['defaults']['snmp_write'])
    puts "#{$0}: WARNING: missing defaults section or defaults values for snmp_read and snmp_write in conf file"
  end

  file = fetch_file(config['nodesfile'])
  node = fetch_node(file, options)

rescue SystemCallError
  puts "#{$0}: error: #{$!}"
  puts "unable to continue without a proper or readable configuration file, exiting..."
  exit

rescue
  puts "#{$0}: error: #{$!}: node not found in configuration"
  exit
  
else
  if options[:action]
    change_state(file, node, config, options)
    read_state(file, node, config, options)
  else
    read_state(file, node, config, options)
  end
end

# eof
